{
  "version": 3,
  "sources": ["../../graphology-layout/random.js", "../../@react-sigma/layout-random/src/useLayoutRandom.ts"],
  "sourcesContent": ["/**\n * Graphology Random Layout\n * =========================\n *\n * Simple layout giving uniform random positions to the nodes.\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Default options.\n */\nvar DEFAULTS = {\n  dimensions: ['x', 'y'],\n  center: 0.5,\n  rng: Math.random,\n  scale: 1\n};\n\n/**\n * Abstract function running the layout.\n *\n * @param  {Graph}    graph          - Target  graph.\n * @param  {object}   [options]      - Options:\n * @param  {array}      [dimensions] - List of dimensions of the layout.\n * @param  {number}     [center]     - Center of the layout.\n * @param  {function}   [rng]        - Custom RNG function to be used.\n * @param  {number}     [scale]      - Scale of the layout.\n * @return {object}                  - The positions by node.\n */\nfunction genericRandomLayout(assign, graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout/random: the given graph is not a valid graphology instance.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  var dimensions = options.dimensions;\n\n  if (!Array.isArray(dimensions) || dimensions.length < 1)\n    throw new Error('graphology-layout/random: given dimensions are invalid.');\n\n  var d = dimensions.length;\n  var center = options.center;\n  var rng = options.rng;\n  var scale = options.scale;\n\n  var offset = (center - 0.5) * scale;\n\n  function assignPosition(target) {\n    for (var i = 0; i < d; i++) {\n      target[dimensions[i]] = rng() * scale + offset;\n    }\n\n    return target;\n  }\n\n  if (!assign) {\n    var positions = {};\n\n    graph.forEachNode(function (node) {\n      positions[node] = assignPosition({});\n    });\n\n    return positions;\n  }\n\n  graph.updateEachNodeAttributes(\n    function (_, attr) {\n      assignPosition(attr);\n      return attr;\n    },\n    {\n      attributes: dimensions\n    }\n  );\n}\n\nvar randomLayout = genericRandomLayout.bind(null, false);\nrandomLayout.assign = genericRandomLayout.bind(null, true);\n\nmodule.exports = randomLayout;\n", "import { useLayoutFactory } from '@react-sigma/layout-core';\nimport random, { RandomLayoutOptions } from 'graphology-layout/random';\n\n/**\n * React hook that helps you to manage [random layout](https://graphology.github.io/standard-library/layout.html#random).\n *\n * ```typescript\n * const { positions, assign } = useLayoutRandom(...);\n *```\n * @category Hook\n */\nexport function useLayoutRandom(options: RandomLayoutOptions = {}) {\n  return useLayoutFactory<RandomLayoutOptions>(random, options);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAMA,QAAI,kBAAkB;AACtB,QAAI,UAAU;AAKd,QAAI,WAAW;AAAA,MACb,YAAY,CAAC,KAAK,GAAG;AAAA,MACrB,QAAQ;AAAA,MACR,KAAK,KAAK;AAAA,MACV,OAAO;AAAA,IACT;AAaA,aAAS,oBAAoB,QAAQ,OAAO,SAAS;AACnD,UAAI,CAAC,QAAQ,KAAK;AAChB,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAEF,gBAAU,gBAAgB,SAAS,QAAQ;AAE3C,UAAI,aAAa,QAAQ;AAEzB,UAAI,CAAC,MAAM,QAAQ,UAAU,KAAK,WAAW,SAAS;AACpD,cAAM,IAAI,MAAM,yDAAyD;AAE3E,UAAI,IAAI,WAAW;AACnB,UAAI,SAAS,QAAQ;AACrB,UAAI,MAAM,QAAQ;AAClB,UAAI,QAAQ,QAAQ;AAEpB,UAAI,UAAU,SAAS,OAAO;AAE9B,eAAS,eAAe,QAAQ;AAC9B,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,iBAAO,WAAW,CAAC,CAAC,IAAI,IAAI,IAAI,QAAQ;AAAA,QAC1C;AAEA,eAAO;AAAA,MACT;AAEA,UAAI,CAAC,QAAQ;AACX,YAAI,YAAY,CAAC;AAEjB,cAAM,YAAY,SAAU,MAAM;AAChC,oBAAU,IAAI,IAAI,eAAe,CAAC,CAAC;AAAA,QACrC,CAAC;AAED,eAAO;AAAA,MACT;AAEA,YAAM;AAAA,QACJ,SAAU,GAAG,MAAM;AACjB,yBAAe,IAAI;AACnB,iBAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,YAAY;AAAA,QACd;AAAA,MACF;AAAA,IACF;AAEA,QAAI,eAAe,oBAAoB,KAAK,MAAM,KAAK;AACvD,iBAAa,SAAS,oBAAoB,KAAK,MAAM,IAAI;AAEzD,WAAO,UAAU;AAAA;AAAA;;;;ACvED,SAAAA,EAAgBC,KAA+B,CAAA,GAAA;AAC7D,SAAOC,EAAsCC,cAAAA,SAAQF,EAAAA;AACvD;",
  "names": ["useLayoutRandom", "options", "useLayoutFactory", "random"]
}

{
  "version": 3,
  "sources": ["../../graphology-layout/circular.js", "../../@react-sigma/layout-circular/src/useLayoutCircular.ts"],
  "sourcesContent": ["/**\n * Graphology Circular Layout\n * ===========================\n *\n * Layout arranging the nodes in a circle.\n */\nvar resolveDefaults = require('graphology-utils/defaults');\nvar isGraph = require('graphology-utils/is-graph');\n\n/**\n * Default options.\n */\nvar DEFAULTS = {\n  dimensions: ['x', 'y'],\n  center: 0.5,\n  scale: 1\n};\n\n/**\n * Abstract function running the layout.\n *\n * @param  {Graph}    graph          - Target  graph.\n * @param  {object}   [options]      - Options:\n * @param  {object}     [attributes] - Attributes names to map.\n * @param  {number}     [center]     - Center of the layout.\n * @param  {number}     [scale]      - Scale of the layout.\n * @return {object}                  - The positions by node.\n */\nfunction genericCircularLayout(assign, graph, options) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout/random: the given graph is not a valid graphology instance.'\n    );\n\n  options = resolveDefaults(options, DEFAULTS);\n\n  var dimensions = options.dimensions;\n\n  if (!Array.isArray(dimensions) || dimensions.length !== 2)\n    throw new Error('graphology-layout/random: given dimensions are invalid.');\n\n  var center = options.center;\n  var scale = options.scale;\n  var tau = Math.PI * 2;\n\n  var offset = (center - 0.5) * scale;\n  var l = graph.order;\n\n  var x = dimensions[0];\n  var y = dimensions[1];\n\n  function assignPosition(i, target) {\n    target[x] = scale * Math.cos((i * tau) / l) + offset;\n    target[y] = scale * Math.sin((i * tau) / l) + offset;\n\n    return target;\n  }\n\n  var i = 0;\n\n  if (!assign) {\n    var positions = {};\n\n    graph.forEachNode(function (node) {\n      positions[node] = assignPosition(i++, {});\n    });\n\n    return positions;\n  }\n\n  graph.updateEachNodeAttributes(\n    function (_, attr) {\n      assignPosition(i++, attr);\n      return attr;\n    },\n    {\n      attributes: dimensions\n    }\n  );\n}\n\nvar circularLayout = genericCircularLayout.bind(null, false);\ncircularLayout.assign = genericCircularLayout.bind(null, true);\n\nmodule.exports = circularLayout;\n", "import { useLayoutFactory } from '@react-sigma/layout-core';\nimport circular, { CircularLayoutOptions } from 'graphology-layout/circular';\n\n/**\n * React hook that helps you to manage [circle layout](https://graphology.github.io/standard-library/layout.html#circular).\n *\n * ```typescript\n * const { positions, assign } = useLayoutCircular(...);\n *```\n * @category Hook\n */\nexport function useLayoutCircular(options: CircularLayoutOptions = {}) {\n  return useLayoutFactory<CircularLayoutOptions>(circular, options);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAMA,QAAI,kBAAkB;AACtB,QAAI,UAAU;AAKd,QAAI,WAAW;AAAA,MACb,YAAY,CAAC,KAAK,GAAG;AAAA,MACrB,QAAQ;AAAA,MACR,OAAO;AAAA,IACT;AAYA,aAAS,sBAAsB,QAAQ,OAAO,SAAS;AACrD,UAAI,CAAC,QAAQ,KAAK;AAChB,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAEF,gBAAU,gBAAgB,SAAS,QAAQ;AAE3C,UAAI,aAAa,QAAQ;AAEzB,UAAI,CAAC,MAAM,QAAQ,UAAU,KAAK,WAAW,WAAW;AACtD,cAAM,IAAI,MAAM,yDAAyD;AAE3E,UAAI,SAAS,QAAQ;AACrB,UAAI,QAAQ,QAAQ;AACpB,UAAI,MAAM,KAAK,KAAK;AAEpB,UAAI,UAAU,SAAS,OAAO;AAC9B,UAAI,IAAI,MAAM;AAEd,UAAI,IAAI,WAAW,CAAC;AACpB,UAAI,IAAI,WAAW,CAAC;AAEpB,eAAS,eAAeA,IAAG,QAAQ;AACjC,eAAO,CAAC,IAAI,QAAQ,KAAK,IAAKA,KAAI,MAAO,CAAC,IAAI;AAC9C,eAAO,CAAC,IAAI,QAAQ,KAAK,IAAKA,KAAI,MAAO,CAAC,IAAI;AAE9C,eAAO;AAAA,MACT;AAEA,UAAI,IAAI;AAER,UAAI,CAAC,QAAQ;AACX,YAAI,YAAY,CAAC;AAEjB,cAAM,YAAY,SAAU,MAAM;AAChC,oBAAU,IAAI,IAAI,eAAe,KAAK,CAAC,CAAC;AAAA,QAC1C,CAAC;AAED,eAAO;AAAA,MACT;AAEA,YAAM;AAAA,QACJ,SAAU,GAAG,MAAM;AACjB,yBAAe,KAAK,IAAI;AACxB,iBAAO;AAAA,QACT;AAAA,QACA;AAAA,UACE,YAAY;AAAA,QACd;AAAA,MACF;AAAA,IACF;AAEA,QAAI,iBAAiB,sBAAsB,KAAK,MAAM,KAAK;AAC3D,mBAAe,SAAS,sBAAsB,KAAK,MAAM,IAAI;AAE7D,WAAO,UAAU;AAAA;AAAA;;;;ACzED,SAAAC,EAAkBC,KAAiC,CAAA,GAAA;AACjE,SAAOC,EAAwCC,gBAAAA,SAAUF,EAAAA;AAC3D;",
  "names": ["i", "useLayoutCircular", "options", "useLayoutFactory", "circular"]
}

{
  "version": 3,
  "sources": ["../../@react-sigma/layout-core/src/useLayoutFactory.ts", "../../@react-sigma/layout-core/src/useWorkerLayoutFactory.ts", "../../@react-sigma/layout-core/src/assets/icons/play-solid.svg", "../../@react-sigma/layout-core/src/assets/icons/stop-solid.svg", "../../@react-sigma/layout-core/src/WorkerLayoutControl.tsx"],
  "sourcesContent": ["import { isEqual, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport { useCallback, useRef } from 'react';\n\n/**\n * Generic type for Graphology layout.\n */\nexport interface GraphologyLayout<T> {\n  (graph: Graph, options: T): { [node: string]: { [dimension: string]: number } };\n  assign(graph: Graph, options: T): void;\n}\n\n/**\n * Generic type for layout hooks.\n */\nexport type LayoutHook = {\n  /**\n   * Returns a positions map by node key.\n   */\n  positions: () => { [node: string]: { [dimension: string]: number } };\n  /**\n   * Assign layout node's position into the sigma graph.\n   */\n  assign: () => void;\n};\n\n/**\n * Factory for layout hook.\n */\nexport function useLayoutFactory<T>(layout: GraphologyLayout<T>, parameter: T): LayoutHook {\n  const sigma = useSigma();\n\n  // Default layout settings\n  const settings = useRef<T>(parameter);\n  if (!isEqual(settings.current, parameter)) settings.current = parameter;\n\n  const positions = useCallback(() => {\n    if (settings.current) return layout(sigma.getGraph(), settings.current);\n    else return {};\n  }, [sigma, settings, layout]);\n\n  const assign = useCallback(() => {\n    if (settings.current) {\n      layout.assign(sigma.getGraph(), settings.current);\n    }\n  }, [sigma, settings, layout]);\n\n  return { positions, assign };\n}\n", "import { isEqual, useSigma } from '@react-sigma/core';\nimport Graph from 'graphology';\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\nexport type LayoutWorkerHook = {\n  stop: () => void;\n  start: () => void;\n  kill: () => void;\n  isRunning: boolean;\n};\n\nexport interface GraphologyWorkerLayout {\n  stop: () => void;\n  start: () => void;\n  kill: () => void;\n}\n\ninterface GraphologyWorkerLayoutConstructor<T> {\n  new (graph: Graph, settings: T): GraphologyWorkerLayout;\n}\n\nexport function useWorkerLayoutFactory<T>(\n  worker: GraphologyWorkerLayoutConstructor<T>,\n  parameter: T,\n): LayoutWorkerHook {\n  const sigma = useSigma();\n  const [isRunning, setIsRunning] = useState<boolean>(false);\n  const [layout, setLayout] = useState<GraphologyWorkerLayout | null>(null);\n  const settings = useRef<T>(parameter);\n  if (!isEqual(settings.current, parameter)) settings.current = parameter;\n\n  useEffect(() => {\n    setIsRunning(false);\n    let newLayout: GraphologyWorkerLayout | null = null;\n    if (settings.current) newLayout = new worker(sigma.getGraph(), settings.current);\n    setLayout(newLayout);\n    return () => {\n      if (newLayout !== null) newLayout.kill();\n    };\n  }, [sigma, settings, setLayout, setIsRunning, worker]);\n\n  const stop = useCallback(() => {\n    if (layout) {\n      layout.stop();\n      setIsRunning(false);\n    }\n  }, [layout, setIsRunning]);\n\n  const start = useCallback(() => {\n    if (layout) {\n      layout.start();\n      setIsRunning(true);\n    }\n  }, [layout, setIsRunning]);\n\n  const kill = useCallback(() => {\n    if (layout) {\n      layout.kill();\n    }\n    setIsRunning(false);\n  }, [layout, setIsRunning]);\n\n  return { stop, start, kill, isRunning };\n}\n", "export default \"data:image/svg+xml,%3Csvg%20aria-hidden%3D%22true%22%20focusable%3D%22false%22%20data-prefix%3D%22fas%22%20data-icon%3D%22play%22%20class%3D%22svg-inline--fa%20fa-play%20fa-w-14%22%20role%3D%22img%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20448%20512%22%3E%3Cpath%20fill%3D%22currentColor%22%20d%3D%22M424.4%20214.7L72.4%206.6C43.8-10.3%200%206.1%200%2047.9V464c0%2037.5%2040.7%2060.1%2072.4%2041.3l352-208c31.4-18.5%2031.5-64.1%200-82.6z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\"", "export default \"data:image/svg+xml,%3Csvg%20aria-hidden%3D%22true%22%20focusable%3D%22false%22%20data-prefix%3D%22fas%22%20data-icon%3D%22stop%22%20class%3D%22svg-inline--fa%20fa-stop%20fa-w-14%22%20role%3D%22img%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20448%20512%22%3E%3Cpath%20fill%3D%22currentColor%22%20d%3D%22M400%2032H48C21.5%2032%200%2053.5%200%2080v352c0%2026.5%2021.5%2048%2048%2048h352c26.5%200%2048-21.5%2048-48V80c0-26.5-21.5-48-48-48z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\"", "import { useSigma } from '@react-sigma/core';\nimport React, { CSSProperties, useEffect } from 'react';\n\nimport { ReactComponent as StartLayoutIcon } from './assets/icons/play-solid.svg';\nimport { ReactComponent as StopLayoutIcon } from './assets/icons/stop-solid.svg';\nimport { LayoutWorkerHook } from './useWorkerLayoutFactory';\n\ntype WorkerLayoutLabelKeys = 'start' | 'stop';\n\n/**\n * Properties for `WorkerLayoutControl` component\n */\nexport interface WorkerLayoutControlProps {\n  /**\n   * HTML id\n   */\n  id?: string;\n\n  /**\n   * HTML class\n   */\n  className?: string;\n\n  /**\n   * HTML CSS style\n   */\n  style?: CSSProperties;\n\n  /**\n   * The layout hook to use\n   */\n  layout: LayoutWorkerHook;\n\n  /**\n   * Option to tell what we do when the component is mounted\n   *  - <code>-1</code> means that we do nothing (it's the same as no value)\n   *  - <code>0</code> means that we start the algo (and don't auto stop it)\n   *  - <code>X</code> mans that we start the algo, and stop it after X milliseconds\n   */\n  autoRunFor?: number;\n\n  /**\n   * It's possible to customize the button, by passing to JSX Element.\n   * First one is for the \"start layout\", and the second to \"stop layout\".\n   * Example :\n   * ```jsx\n   * <WorkerLayoutControl>\n   *   <>\n   *     <span>Start</span>\n   *     <span>Stop</span>\n   *   </>\n   * </WorkerLayoutControl>\n   * ```\n   */\n  children?: [React.JSX.Element, React.JSX.Element];\n\n  /**\n   * Map of the labels we use in the component.\n   * This is usefull for I18N\n   */\n  labels?: { [Key in WorkerLayoutLabelKeys]?: string };\n}\n\nexport function WorkerLayoutControl({\n  id,\n  className,\n  style,\n  layout,\n  autoRunFor,\n  children,\n  labels = {},\n}: WorkerLayoutControlProps) {\n  // Get Sigma\n  const sigma = useSigma();\n  // Get layout\n  const { stop, start, isRunning } = layout;\n  // Common html props for the div\n  const props = {\n    className: `react-sigma-control ${className || ''}`,\n    id,\n    style,\n  };\n\n  /**\n   * Init component when Sigma or component settings change.\n   */\n  useEffect(() => {\n    if (!sigma) {\n      return;\n    }\n\n    // we run the algo\n    let timeout: number | null = null;\n    if (autoRunFor !== undefined && autoRunFor > -1 && sigma.getGraph().order > 0) {\n      start();\n      // set a timeout to stop it\n      timeout =\n        autoRunFor > 0\n          ? window.setTimeout(() => {\n              stop();\n            }, autoRunFor)\n          : null;\n    }\n\n    //cleaning\n    return () => {\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n    };\n  }, [autoRunFor, start, stop, sigma]);\n\n  return (\n    <div {...props}>\n      <button\n        onClick={() => (isRunning ? stop() : start())}\n        title={\n          isRunning ? labels['stop'] || 'Stop the layout animation' : labels['start'] || 'Start the layout animation'\n        }\n      >\n        {children && !isRunning && children[0]}\n        {children && isRunning && children[1]}\n        {!children && !isRunning && <StartLayoutIcon style={{ width: '1em' }} />}\n        {!children && isRunning && <StopLayoutIcon style={{ width: '1em' }} />}\n      </button>\n    </div>\n  );\n}\n"],
  "mappings": "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",
  "names": ["useLayoutFactory", "layout", "parameter", "sigma", "useSigma", "settings", "useRef", "isEqual", "current", "positions", "useCallback", "getGraph", "assign", "useWorkerLayoutFactory", "worker", "isRunning", "setIsRunning", "useState", "setLayout", "useEffect", "newLayout", "kill", "stop", "start", "_path", "_extends", "Object", "bind", "n", "e", "arguments", "length", "t", "r", "hasOwnProperty", "call", "apply", "SvgPlaySolid", "props", "createElement", "xmlns", "className", "viewBox", "width", "height", "fill", "d", "SvgStopSolid", "WorkerLayoutControl", "id", "style", "autoRunFor", "children", "labels", "timeout", "order", "window", "setTimeout", "clearTimeout", "React", "onClick", "title", "StartLayoutIcon", "StopLayoutIcon"]
}

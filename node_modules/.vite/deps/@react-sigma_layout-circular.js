import {
  require_defaults
} from "./chunk-A3ISJEXD.js";
import {
  o
} from "./chunk-QBFRYOH7.js";
import "./chunk-4VMHPG2O.js";
import {
  require_is_graph
} from "./chunk-KWB6VWZC.js";
import "./chunk-5R2YFWNI.js";
import "./chunk-FCKPN5ZG.js";
import "./chunk-KNJF7WWH.js";
import "./chunk-IYWZER4T.js";
import {
  __commonJS,
  __toESM
} from "./chunk-FDBJFBLO.js";

// node_modules/graphology-layout/circular.js
var require_circular = __commonJS({
  "node_modules/graphology-layout/circular.js"(exports, module) {
    var resolveDefaults = require_defaults();
    var isGraph = require_is_graph();
    var DEFAULTS = {
      dimensions: ["x", "y"],
      center: 0.5,
      scale: 1
    };
    function genericCircularLayout(assign, graph, options) {
      if (!isGraph(graph))
        throw new Error(
          "graphology-layout/random: the given graph is not a valid graphology instance."
        );
      options = resolveDefaults(options, DEFAULTS);
      var dimensions = options.dimensions;
      if (!Array.isArray(dimensions) || dimensions.length !== 2)
        throw new Error("graphology-layout/random: given dimensions are invalid.");
      var center = options.center;
      var scale = options.scale;
      var tau = Math.PI * 2;
      var offset = (center - 0.5) * scale;
      var l = graph.order;
      var x = dimensions[0];
      var y = dimensions[1];
      function assignPosition(i2, target) {
        target[x] = scale * Math.cos(i2 * tau / l) + offset;
        target[y] = scale * Math.sin(i2 * tau / l) + offset;
        return target;
      }
      var i = 0;
      if (!assign) {
        var positions = {};
        graph.forEachNode(function(node) {
          positions[node] = assignPosition(i++, {});
        });
        return positions;
      }
      graph.updateEachNodeAttributes(
        function(_, attr) {
          assignPosition(i++, attr);
          return attr;
        },
        {
          attributes: dimensions
        }
      );
    }
    var circularLayout = genericCircularLayout.bind(null, false);
    circularLayout.assign = genericCircularLayout.bind(null, true);
    module.exports = circularLayout;
  }
});

// node_modules/@react-sigma/layout-circular/lib/react-sigma_layout-circular.esm.min.js
var import_circular = __toESM(require_circular());
function t(t2 = {}) {
  return o(import_circular.default, t2);
}
export {
  t as useLayoutCircular
};
//# sourceMappingURL=@react-sigma_layout-circular.js.map
